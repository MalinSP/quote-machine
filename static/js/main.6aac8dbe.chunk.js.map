{"version":3,"sources":["colors.js","App.js","reportWebVitals.js","index.js"],"names":["COLORS_ARR","quoteDBUrl","App","useState","quote","setQuote","author","setAuthor","setRandomNumber","quotesArr","setQuotesArr","accentColor","setAccentColor","fetchQuotes","url","a","fetch","response","json","parsedJSON","quotes","console","log","useEffect","className","style","backgroundColor","id","color","target","href","encodeURI","icon","faTwitter","onClick","randomInt","Math","floor","length","random","randomColor","getRandomQuote","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kOAWeA,G,MAXI,CAAC,UAAW,UAAW,UAAW,UAAW,UAC5D,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,Y,uBCH5CC,EAAa,yIA8CFC,MA5Cf,WACA,MAA0BC,mBAAS,uJAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA4BF,mBAAS,iBAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAAwCJ,mBAAS,GAAjD,mBAAqBK,GAArB,WACA,EAAkCL,mBAAS,MAA3C,mBAAOM,EAAP,KAAkBC,EAAlB,KACA,EAAsCP,mBAAS,WAA/C,mBAAOQ,EAAP,KAAoBC,EAApB,KAEMC,EAAW,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,sEACKC,MAAMF,GADX,cACZG,EADY,gBAEOA,EAASC,OAFhB,OAEZC,EAFY,OAGlBT,EAAaS,EAAWC,QACxBC,QAAQC,IAAIH,GAJM,2CAAH,sDAoBf,OAbFI,qBAAU,WACRV,EAAYZ,KACT,CAACA,IAYF,qBAAKuB,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAaC,MAAO,CAACC,gBAAiBf,GAAxD,SACE,sBAAKgB,GAAG,YAAYF,MAAO,CAACG,MAAOjB,GAAnC,UACA,oBAAGgB,GAAG,OAAN,cAAgBvB,EAAhB,OACA,oBAAGuB,GAAG,SAAN,gBAAmBrB,KACnB,sBAAKkB,UAAU,UAAf,UACA,mBAAGC,MAAO,CAACC,gBAAiBf,GAAcgB,GAAG,cAAeE,OAAO,SAASC,KAAMC,UAAU,4CAA8C3B,EAAQ,OAASE,GAA3J,SAAoK,cAAC,IAAD,CAAiB0B,KAAOC,QAC5L,wBAASN,GAAG,YAAYF,MAAO,CAACC,gBAAiBf,GAAcuB,QAAS,kBAjBzD,WACrB,IAAIC,EAAYC,KAAKC,MAAM5B,EAAU6B,OAASF,KAAKG,UAC/CC,EAAcJ,KAAKC,MAAMrC,EAAWsC,OAASF,KAAKG,UACtD/B,EAAgB2B,GAChBvB,EAAeZ,EAAWwC,IAC1BnC,EAASI,EAAU0B,GAAW/B,OAC9BG,EAAUE,EAAU0B,GAAW7B,QAWoDmC,IAA7E,qCC/BOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6aac8dbe.chunk.js","sourcesContent":["const COLORS_ARR = ['#FF6633', '#FFB399', '#FF33FF', '#FFFF99', '#00B3E6', \r\n\t\t  '#E6B333', '#3366E6', '#999966', '#99FF99', '#B34D4D',\r\n\t\t  '#80B300', '#809900', '#E6B3B3', '#6680B3', '#66991A', \r\n\t\t  '#FF99E6', '#CCFF1A', '#FF1A66', '#E6331A', '#33FFCC',\r\n\t\t  '#66994D', '#B366CC', '#4D8000', '#B33300', '#CC80CC', \r\n\t\t  '#66664D', '#991AFF', '#E666FF', '#4DB3FF', '#1AB399',\r\n\t\t  '#E666B3', '#33991A', '#CC9999', '#B3B31A', '#00E680', \r\n\t\t  '#4D8066', '#809980', '#E6FF80', '#1AFF33', '#999933',\r\n\t\t  '#FF3380', '#CCCC00', '#66E64D', '#4D80CC', '#9900B3', \r\n\t\t  '#E64D66', '#4DB380', '#FF4D4D', '#99E6E6', '#6666FF'];\r\n\r\nexport default COLORS_ARR","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport COLORS_ARR from \"./colors\"\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons'\n\nlet quoteDBUrl = \"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\"\n\nfunction App() {\nconst [quote, setQuote] = useState(\"If you look at what you have in life, you’ll always have more. If you look at what you don’t have in life, you’ll never have enough.\")\nconst [author, setAuthor] = useState(\"Oprah Winfrey\")\nconst [randomNumber, setRandomNumber] = useState(0)\nconst [quotesArr, setQuotesArr] = useState(null)\nconst [accentColor, setAccentColor] = useState(\"#CC9999\")\n \nconst fetchQuotes = async (url) => {\n  const response = await fetch(url)\n  const parsedJSON = await response.json()\n  setQuotesArr(parsedJSON.quotes)\n  console.log(parsedJSON)\n  }\n\nuseEffect(() => {\n  fetchQuotes(quoteDBUrl)\n  }, [quoteDBUrl])\n\nconst getRandomQuote = () => {\n  let randomInt = Math.floor(quotesArr.length * Math.random())\n  let randomColor = Math.floor(COLORS_ARR.length * Math.random())\n  setRandomNumber(randomInt)\n  setAccentColor(COLORS_ARR[randomColor])\n  setQuote(quotesArr[randomInt].quote)  \n  setAuthor(quotesArr[randomInt].author)\n}\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\" style={{backgroundColor: accentColor}}>\n        <div id=\"quote-box\" style={{color: accentColor}}>\n        <p id=\"text\" >\"{quote}\"</p>\n        <p id=\"author\"> - {author}</p>\n        <div className=\"buttons\">\n        <a style={{backgroundColor: accentColor}} id=\"tweet-quote\"  target=\"_blank\" href={encodeURI('http://www.twitter.com/intent/tweet?text=' + quote + \"  - \" + author)}><FontAwesomeIcon icon ={faTwitter} /></a>\n        <button  id=\"new-quote\" style={{backgroundColor: accentColor}} onClick={()=> getRandomQuote()}>Change Quote</button>\n        </div>\n        \n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}